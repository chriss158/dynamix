#!/bin/bash

####################################################################################
# s3_sleep
# A utility to set conditional S3 sleep mode
# This script has been adapted from the original S3 script available on the Limetech
# forum. It accepts parameter options to overwrite the default settings.
# Copied some parts from "cache_dirs" to get a similar background behaviour.
#
# Version 1.0.0   Initial version
# Version 1.1.0   Corrections in HDD, TCP and IP monitoring and other adjustments
# Version 1.1.1   Added -t <time> option to set network/device inactivity interval
# Version 1.1.2   Added -e <eth> option to set ethernet interface to monitor
# Version 1.1.3   Added -w option to set wol options prior to sleep
#                 Added -S option to sleep now
# Version 1.1.4   Added -b option to execute shell script before sleep
#                 Added -p option to execute shell script after wake-up
#
# Version 1.2.0   Added program logging upon start
# Version 2.0.0   Added action "sleep" or "shutdown"
# Version 2.1.0   Added improvements for TCP and session monitoring, debugging option
#                 Added -c option to exclude cache drive from array monitoring
#                 Added -L option to allow remote session monitoring (SSH)
#                 Added -l option to allow local session monitoring (TTY)
#                 Added -N option to set idle threshold for TCP monitoring
#                 Added -D option to allow debugging (troubleshooting)
#                 Based on suggestions made by 'Bagpuss'
# Version 2.1.1   SlrG added feature to include/exclude drives outside of array
# Version 2.1.2   SlrG fix cache drive list inclusion
# Version 3.0.0   Code rewrite, remove bwm-ng dependency
# Version 3.0.1   Move immediate sleep to front
# Version 3.0.2   Include SCSI attached drives in array list
# Version 3.0.3   Changed HDD activity check to allow RAID controllers (courtesy Michael A.)
# Version 3.0.4   Fixed full path to powerdown script
# Version 3.0.5   HDD activity check includes both disk state and disk I/O activity
# Version 3.0.6   Support for Unraid 6.4
# Version 3.0.7   Support for multi cache pool - added in Unraid 6.9
#                 Correction for Cache pool
#                 Added monitor option: both (default), status only, counters only
# Version 3.0.8   Support for Unraid 6.9
# Version 3.0.9   Fix device detection
# Version 3.0.10  Fix list of devices outside array
#                 Take into account custom port numbers of telnet and ssh
# Version 3.0.11  Use sdspin to monitor disks (provided by Doron)
# Version 3.0.12  Add wake up for TVHeadend recordings
# Version 3.0.13  Add check for TVHeadend activity
# Version 3.0.14  Add wake up times
# Version 3.0.15  Add check for process activity
# Version 3.0.16  Extra delay is now running after Unraid enters an inactive state (not, as before, after the array is inactive)
# Version 3.0.17  Activity detected message only once
# Version 3.0.18  Fix checking of drive status using sdspin
# Version 3.0.19  Fix detection of Flash, Cache and Array devices
# Version 3.0.20  Use "idle minutes before next wake up" for all activities, not only for tvheadend recordings
#
# Bergware International
####################################################################################
version=3.0.20
program=$(basename $0)
ini=/var/local/emhttp/disks.ini

# Get flash device
getFlash() {
  flash=($(grep -PB16 '^type="Flash' $ini|grep -Po '^device="\K[^"]+'))
}

# Get list of cache devices (if present)
getCache() {
  cache=($(grep -PB16 '^type="Cache' $ini|grep -Po '^device="\K[^"]+'))
}

# Get list of array devices
getArray() {
  array=($(grep -PB16 '^type="(Parity|Data)' $ini|grep -Po '^device="\K[^"]+'))
}

# Get list of all devices
getDisks() {
  disks=($(ls -l /dev/disk/by-id/[asun]*|awk -F/ '$0!~/part1/{print $7"="$5}'|grep -v 'nvme-eui'|sed 's/\(usb\|ata\|scsi\|ide\|nvme\)-//;s/ -> ..$//'))
}

# list devices outside of array
if [[ $1 == -ED ]]; then
  getFlash
  getCache
  getArray
  array+=(${flash[@]});
  [[ -n $cache ]] && array+=(${cache[@]})
  getDisks
  # Remove not excludable devices from list
  for dev in ${array[@]}; do
    disks=(${disks[@]//*$dev=*})
  done
  [[ -n $disks ]] && echo ${disks[@]}|sort
  exit 0
fi

usage() {
 echo
 echo "Usage: $program [-acnRFSLlVqWTG] [-f type] [-I disk] [-N idle] [-i ip] [-d day] [-h hour] [-m time] [-t time] [-e eth] [-w wol] [-b name] [-k name] [-p name] [-r process] [-C case] [-D 0-4] [-ED] [-H tvheadend ip] [-E tvheadend port] [-A tvheadend user] [-P tvheadend password] [-Y tvheadend boot delay] [-M idle minutes]"
 echo " -a                wait for array inactivity"
 echo " -c                exclude cache drive from array monitoring"
 echo " -W                Wake up for TVHeadend recordings"
 echo " -H ip             TVHeadend IP"
 echo " -E port           TVHeadend Port"
 echo " -A user           TVHeadend User"
 echo " -P password       TVHeadend Password"
 echo " -Y boot delay     TVHeadend Boot delay"
 echo " -T                TVHeadend check activity"
 echo " -G                TVHeadend consider EPG grabbing"
 echo " -M idle minutes   Idle minutes before next wake up"
 echo " -f type           1 = device status monitoring only, 2 = device counters monitoring only"
 echo " -I disk           include outside of array disk (may be repeated for other disks)"
 echo " -n                wait for network inactivity"
 echo " -N idle           set TCP idle threshold"
 echo " -R                do DHCP renewal after wake-up"
 echo " -r process        A process wich prevent suspend"
 echo " -F                force gigabit speed after wake-up"
 echo " -S                sleep NOW"
 echo " -i ip             IP address to ping (may be repeated as many times as desired)"
 echo " -L                check remotely logged in users (SSH)"
 echo " -l                check locally logged in users"
 echo " -d day            Excluded day (may be repeated as many times as desired)"
 echo " -h hour           Excluded hour (may be repeated as many times as desired)"
 echo " -m time           extra delay after array inactivity"
 echo " -t time           interval of network / device inactivity"
 echo " -e eth            select interface to monitor"
 echo " -w wol            set WOL options before sleep"
 echo " -b name           execute shell script 'name' before sleep"
 echo " -p name           execute shell script 'name' after wake-up"
 echo " -k name           shellscript 'name' with wake-up times"
 echo " -C case           execute case (1) sleep or (2) shutdown"
 echo " -D 0-4            set debug reporting (0-4)"
 echo " -ED               print drives outside of array and exit"
 echo " -V                print program version and exit"
 echo " -q                terminate running background instance of s3_sleep"
}

# default settings
action=sleep
debug=0
checkCache=yes

# before going to sleep/shutdown
delayInit=30          # delay in minutes after HDD spindown and before checking for external activity

# control of internal conditions
checkHDD=no           # check if HDDs are parked before counting down towards sleep
monitor=0             # device hardware monitoring and device counters monitoring
outside=()            # list of drives outside array to include in monitoring
skipDay=()            # only countdown towards sleep outside these days
                      # example: <skipDay="0 6"> (skip Sunday and Saturday)
skipHour=()           # only countdown towards sleep outside these hours
                      # example: <skipHour="07 08 19 20">

# control of external conditions
checkTCP=no           # check for TCP activity
eth=eth0              # interface to monitor TCP activity
idle=0                # threshold of TCP activity in KB
checkSSH=no           # check for remote login sessions (telnet or SSH)
checkTTY=no           # check for local login sessions (if "no" allows console debugging)
hosts=()              # do not sleep when 'hosts' are pingable
                      # example: <hosts="192.168.1.1 172.16.1.1">

# before sleep
setWol=               # set wol options before sleep
preRun=               # no additional commands to run

# after waking up
dhcpRenew=no          # <no> for servers w/static IP address
forceGb=no            # might not be needed; probably always safe
postRun=              # no additional commands to run

# program control
quit_flag=no          # signal program exit
sleepNow=no           # force immediate sleep now

# tvheadend control
tvheadendIp=
tvheadendPort=9981
tvheadendUser=
tvheadendPassword=
tvheadendWakeupRec=no
tvheadendBootDelaySeconds=180
tvheadendCheckActivity=no
tvheadendConsiderEPGGrabbing=no

# wake up times
wakeUpTimes=

idleMinutesBeforeNextWakeUp=15

processes=()

# options to overwrite defaults
while getopts "acnWTGN:i:f:I:d:h:m:t:e:C:w:RFqVSLlb:p:D:H:E:A:P:Y:M:k:r:" opt; do
  case $opt in
    a) checkHDD=yes ;;
    c) checkCache=no ;;
    f) monitor=$OPTARG ;;
    I) outside+=($OPTARG) ;;
    n) checkTCP=yes ;;
    N) idle=$OPTARG ;;
    i) hosts+=($OPTARG) ;;
    r) processes+=($OPTARG) ;;
    d) skipDay+=($OPTARG) ;;
    h) skipHour+=($OPTARG) ;;
    m) delayInit=$OPTARG ;;
    t) timerInit=$OPTARG ;;
    e) eth=$OPTARG ;;
    C) case $OPTARG in
         1) action=sleep ;;
         2) action=shutdown ;;
       esac ;;
    w) setWol=$OPTARG ;;
    R) dhcpRenew=yes ;;
    F) forceGb=yes ;;
    S) sleepNow=yes ;;
    L) checkSSH=yes ;;
    l) checkTTY=yes ;;
    W) tvheadendWakeupRec=yes;; 
    H) tvheadendIp=$OPTARG ;;
    E) tvheadendPort=$OPTARG ;;
    A) tvheadendUser=$OPTARG ;;
    P) tvheadendPassword=$OPTARG ;;
    Y) tvheadendBootDelaySeconds=$OPTARG ;;
    T) tvheadendCheckActivity=yes;;
    G) tvheadendConsiderEPGGrabbing=yes;;
    M) idleMinutesBeforeNextWakeUp=$OPTARG ;;
    b) preRun=$OPTARG ;;
    p) postRun=$OPTARG ;;
    k) wakeUpTimes=$OPTARG ;;
    D) debug=$OPTARG ;;
    q) quit_flag=yes ;;
   \?) usage; exit ;;
    V) echo $program version: $version ; exit ;;
  esac
done

# Debug logging options for troubleshooting (use -D option)
# debug=0 - no logging (default)
# debug=1 - log to syslog and s3_sleep.log
# debug=2 - log to syslog
# debug=3 - log to s3_sleep.log
# debug=4 - log to console

# Use this feature only in case of sleep not working
# It is intended to help in troubleshooting
log() {
  case $debug in
    1) logger -t "$program" "$1"
       echo "`date`: $1" >>/boot/logs/$program.log ;;
    2) logger -t "$program" "$1" ;;
    3) echo "`date`: $1" >>/boot/logs/$program.log ;;
    4) echo "`date`: $1" ;;
  esac
}

exclude_period() {
  result=
  if [[ -n $skipDay ]]; then
    day=$(date +%w)
    for now in ${skipDay[@]}; do
      if [[ $now == $day ]]; then
        result=1
        break
      fi
    done
  fi
  if [[ -n $skipHour && -z $result ]]; then
    hour=$(date +%H)
    for now in ${skipHour[@]}; do
      if [[ $now == $hour ]]; then
        result=1
        break
      fi
    done
  fi
  if [[ -n $result ]]; then
    log "Excluded day [$day] or hour [$hour]."
    echo $result
  fi
}

HDD_activity() {
  result=
  if [[ $checkHDD == yes ]]; then
    [[ -f /dev/shm/2 ]] && cp -f /dev/shm/2 /dev/shm/1 || touch /dev/shm/1
    awk '/(sd[a-z]*|nvme[0-9]n1) /{print $3,$6+$10}' /proc/diskstats >/dev/shm/2
    
    log "Contents of array: ${array[*]}"
    log "Monitor value: $monitor"

    for dev in ${array[@]}; do
      [[ $monitor -ne 2 ]] && $(sdspin /dev/$dev) 
      # sdspin exit codes: 0=spun up, 1=error, 2=spun down
      sdspinExitCode=$?
      log "sdspinExitCode for $dev: $sdspinExitCode"
      [[ $monitor -ne 1 ]] && diskio=($(grep -Pho "^$dev \K\d+" /dev/shm/1 /dev/shm/2)) || diskio=
      if [[ $sdspinExitCode -eq 0 || ${diskio[0]} != ${diskio[1]} ]]; then
        result=1
        break;
      fi
    done
  fi
  if [[ -n $result ]]; then
    log "Disk activity on going: $dev"
    echo $result
  fi
}

txrx_bytes() {
  echo $(awk "/$eth:/{print \$2+\$10}" /proc/net/dev)
}

TCP_activity() {
  result=
  if [[ $checkTCP == yes ]]; then
    delta=$((($(txrx_bytes)-$start)/120))
    [[ $delta -gt $idle ]] && result=1
  fi
  if [[ -n $result ]]; then
    log "Network activity on going: $(($delta*8)) b/s"
    echo $result
  fi
}

IP_activity() {
  result=
  if [[ -n $hosts ]]; then
    for ip in ${hosts[@]}; do
      if [[ $(ping -n -q -c 2 $ip|awk '/received/ {print $4}') -gt 0 ]]; then
        result=1
        break
      fi
    done
  fi
  if [[ -n $result ]]; then
    log "Host activity on going: $ip"
    echo $result
  fi
}

process_activity()
{
  result=
  if [[ -n $processes ]]; then
    for process in ${processes[@]}; do
      if [ `pgrep -c $process` -gt 0 ] || [ `pgrep -c -f $process` -gt 0 ]; then
        log "Process activity on going: $process still active."
        result=1
        break
      fi
    done
  fi
	echo $result
}

TTY_activity() {
  result=
  [[ $checkTTY == yes && $(ps -o command,tty|grep '^\-bash'|grep 'tty'|wc -l) -gt 0 ]] && result=1
  if [[ -n $result ]]; then
    log "Local activity on going: console"
    echo $result
  fi
}

SSH_activity() {
  result=
  if [[ $checkSSH == yes ]]; then
    local ident=/boot/config/ident.cfg
    local telnet=$(grep -Pom1 'PORTTELNET="\K[^"]+' $ident 2>/dev/null)
    local ssh=$(grep -Pom1 'PORTSSH="\K[^"]+' $ident 2>/dev/null)
    [[ -z $telnet ]] && telnet=23
    [[ -z $ssh ]] && ssh=22
    [[ $(lsof -O -w -l -i -n -P|awk "/:($telnet|$ssh)-.*\(ESTABLISHED\)\$/"|wc -l) -gt 0 ]] && result=1
  fi
  if [[ -n $result ]]; then
    log "Remote activity on going: telnet/ssh"
    echo $result
  fi
}

queryTvheadend()
{
  response=$(curl --max-time 5 -s --digest -u "$tvheadendUser:$tvheadendPassword" "$tvheadendIp:$tvheadendPort$1")

  # return result if successful
  if [ "$?" = 0 ]; then
          echo "$response"
          return
  fi

  # output failure reason
  case "$?" in
      "28")
              echo "Error: timeout after 5 seconds while trying to access $1"
              return 1;;
      "7")
              echo "Error: failed to connect to $1"
              return 1;;
      *)
              echo "Error: connecting to $1 returned exit code $?"
              return 1;;
  esac
}

TVH_activity()
{
  result=
  if [[ $tvheadendCheckActivity == yes ]]; then
    subscriptions=$(queryTvheadend "/api/status/subscriptions")
    if [ "$?" != 0 ]; then
      log $subscriptions
      echo $result
      return
    fi
    IFS=$'\n' subscription_titles+=($(echo $subscriptions | jq -r ".entries[] | .title" ))
    for subscription_title in "${subscription_titles[@]}"; do
        if [ "$subscription_title" != "epggrab" ] || [ "${tvheadendConsiderEPGGrabbing:-yes}" = yes ]; then
            log "Tvheadend has subscription: '$subscription_title', auto suspend terminated"
            result=1
            echo $result
            return
        fi
    done
  fi
}

check_idle_minutes_next_wakeup() {
  result=
  wake_up_time=$(get_next_wake_up_time)
  if [ -n "$wake_up_time" ]; then
    now=$(date +%s)
    let delta=(wake_up_time - now)/60
    if [ "$delta" -gt 0 ] && [ "$delta" -le "${idleMinutesBeforeNextWakeUp:-15}" ] ; then
      formatted_time=$(date -d @"$wake_up_time" +"%Y-%m-%d %H:%M:%S")
      log "Next wake up time $formatted_time is within idle minutes. Next wake up would be in $delta minutes, auto suspend terminated"
      result=1
      echo $result
      return
    fi
  fi
}

wake_up_times() {
  echo 0 > /sys/class/rtc/rtc0/wakealarm
  wake_up_time=$(get_next_wake_up_time)
  if [ -n "$wake_up_time" ]; then
    rtc_out=$(echo "$(/usr/sbin/rtcwake -m no -t $wake_up_time)")
    result="Next activity at $message. Set wakeup time to '$rtc_out'"
    echo $result
    return 0
  fi
  return 1
}

get_next_wake_up_time() {
  activities=()
  if [ -f "$wakeUpTimes" ] && [ -x "$wakeUpTimes" ]
      then
          IFS=$'\n'
          for line in $("$wakeUpTimes")
          do
              activities+=("$wakeUpTimes:$line")
          done
  fi

  if [[ $tvheadendWakeupRec == yes ]]; then
    tvheadend_dvr_upcoming=$(queryTvheadend "/api/dvr/entry/grid_upcoming?sort=start_real&dir=ASC&limit=5")
    if [ "$?" = 0 ]; then
      IFS=$'\n' activities+=($(echo $tvheadend_dvr_upcoming | jq -r ".entries[] | \"Tvheadend schedule:\" + (.start_real | tostring) + \":\" + .channelname + \" - \" + .disp_title + if (.disp_subtitle | length > 0) then \" (\" + .disp_subtitle + \")\" else \"\" end"))
    else
      log $tvheadend_dvr_upcoming
    fi
  fi

  if [ "${#activities[@]}" -gt 0 ]; then
      IFS=$'\n' activities=($(sort -t: -k2 <<<"${activities[*]}"))

      now=$(date +%s)
      for timestamp_def in "${activities[@]}"
      do
          IFS=':' read -r source timestamp comment <<< "$timestamp_def"
          message=""
          if [ -n "$comment" ]
          then
              message=": $comment"
          fi
          message="$(date --date @$timestamp)$message from $source"

          if [ "$timestamp" -gt "$now" ]
          then
              if [ "$source" = "Tvheadend schedule" ]; then
                wake_date=$(($timestamp - ${tvheadendBootDelaySeconds:-180}))
              else
                wake_date=$(($timestamp))
              fi
              echo "$wake_date"
              return 0
          fi
      done
  fi
  return 1
}

pre_sleep_activity() {
# Set WOL MagicPacket options
  if [[ -n $setWol ]]; then
    log "Send WOL commands: $setWol"
    ethtool -s $eth wol $setWol
  fi
# Additional commands to run
  if [[ -x $preRun ]]; then
    log "Execute custom commands before sleep"
    $preRun
  fi
}

post_sleep_activity() {
# Force NIC to use gigabit networking
  if [[ $forceGb == yes ]]; then
    log "Set NIC to forced gigabit speed"
    ethtool -s $eth speed 1000
    sleep 2
  fi
# Force a DHCP renewal (do not use for static-ip assignments)
  if [[ $dhcpRenew == yes ]]; then
    log "Perform DHCP renewal"
    /sbin/dhcpcd -n
    sleep 5
  fi
# Additional commands to run
  if [[ -x $postRun ]]; then
    log "Execute custom commands after wake-up"
    $postRun
  fi
}

system_sleep() {
  wake_result=$(wake_up_times); wake_rc=$?
  log "Wake up times result: '$wake_result'"

# Do pre-sleep activities
  pre_sleep_activity
# Go to sleep
  log "Enter sleep state now"
  echo -n mem >/sys/power/state
# Do post-sleep activities
  log "Wake-up now"
  post_sleep_activity
}

system_down() {
  wake_result=$(wake_up_times); wake_rc=$?
  log "Wake up times result: '$wake_result'"

  log "Shutdown system now"
# Perform a 'clean' powerdown
  if [[ -x /sbin/poweroff ]]; then
    /sbin/poweroff
  elif [[ -x /user/local/sbin/powerdown ]]; then
    /usr/local/sbin/powerdown
  else
    log "No powerdown script present"
  fi
}

IsBusy() 
{
  if [[ -n $(exclude_period) ]]; then
    return 1
  fi

  if [[ -n $(HDD_activity) ]]; then
    return 1
  fi

  if [[ -n $(TVH_activity)  ]]; then
    return 1
  fi

  if [[ -n $(TCP_activity) ]]; then
    return 1
  fi

  if [[ -n $(SSH_activity) ]]; then
    return 1
  fi

  if [[ -n $(TTY_activity) ]]; then
    return 1
  fi

  if [[ -n $(IP_activity) ]]; then
    return 1
  fi

  if [[ -n $(process_activity) ]]; then
    return 1
  fi

  if [[ -n $(check_idle_minutes_next_wakeup) ]]; then
    return 1
  fi

  return 0
}

# Immediate sleep or shutdown
if [[ $sleepNow == yes ]]; then
  [[ $action == sleep ]] && system_sleep || system_down
  exit 0
fi

# Get all available devices
getFlash
getCache
getArray
getDisks
[[ $checkCache == yes ]] && array+=(${cache[@]})
for dev in ${outside[@]}; do
  array+=($dev)
done
for dev in ${array[@]}; do
  disks=(${disks[@]//*$dev=*})
done
for dev in ${disks[@]}; do
  disks=(${disks[@]//=*})
done
array=($(echo ${array[@]}|tr ' ' '\n'|sort))
disks=($(echo ${disks[@]}|tr ' ' '\n'|sort))
[[ -n $hosts ]] && devices=${hosts[@]} || devices=no
[[ -n $processes ]] && checkProcesses=${processes[@]} || checkProcesses=no

echo "----------------------------------------------
command-args=$*
action mode=$action
check disks status=$checkHDD
check network activity=$checkTCP
check active devices=$devices
check local login=$checkTTY
check remote login=$checkSSH
check process activity=$checkProcesses
check TVHeadend busy=$tvheadendCheckActivity
version=$version
----------------------------------------------
included disks=${array[@]}
excluded disks=${disks[@]}
----------------------------------------------" | logger -t$program

lockfile=/var/lock/s3_sleep.lck
if [[ -f $lockfile ]]; then
  # The file exists so read the PID to see if it is still running
  lock_pid=$(head -n 1 $lockfile)
  if [[ -z $(ps -p $lock_pid|grep $lock_pid) ]]; then
    if [[ $quit_flag == no ]]; then
      # The process is not running, echo current PID into lock file
      echo $$ >$lockfile
    else
      echo "$program $lock_pid is not currently running "
      rm -f $lockfile
      exit 0
    fi
  else
    if [[ $quit_flag == yes ]]; then
      echo killing $program process $lock_pid
      echo killing $program process $lock_pid | logger -t$program
      kill $lock_pid
      rm -f $lockfile
      exit 0
    else
      echo "$program is already running [$lock_pid]"
      exit 1
    fi
  fi
else
  if [[ $quit_flag == yes ]]; then
    echo "$program not currently running "
    exit 0
  else
    echo $$ >$lockfile
  fi
fi

# main (continuous loop)
extraDelay=$delayInit
[[ $checkTCP == yes ]] && start=0 || start=-1
while [[ -f $lockfile ]]; do
  if [[ $start -eq 0 ]]; then
    log "Initialize TCP activity counter"
    start=$(txrx_bytes)
  fi

  IsBusy
  if [[ $? -ne 0 ]]; then
    if [[ $extraDelay != $delayInit ]]; then
      log "Activity detected. Reset timers."
      extraDelay=$delayInit
    fi
  else
    if [[ $extraDelay -lt 0 ]]; then
      log "Communication state is idle"
      [[ $action == sleep ]] && system_sleep || system_down
      log "System woken-up. Reset timers"
      extraDelay=$delayInit
      [[ $checkTCP == yes ]] && start=0 || start=-1
    else
      log "Extra delay period running: $extraDelay minute(s)"
      ((extraDelay--))
    fi
  fi

  [[ $start -gt 0 ]] && start=$(txrx_bytes)

  sleep 60
done &

# while loop was put into background, now disown it, so it will continue to run when user is logged off
background_pid=$!
echo $background_pid >$lockfile
echo "$program process ID $background_pid started, To terminate it, type: $program -q"
echo "$program process ID $background_pid started, To terminate it, type: $program -q"|logger -t$program
disown %%
