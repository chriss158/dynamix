Menu="Stats:1"
Title="Disk Stats"
Tag="bar-chart"
---
<?PHP
/* Copyright 2012-2023, Bergware International.
 * Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
if ($var['fsState']=="Stopped"):
  echo "<div class='notice'>"._('Array must be **Started** to view disk stats').".</div>";
  return;
endif;

$plugin = 'dynamix.system.stats';
$cfg    = parse_plugin_cfg($plugin);
$stats  = "/plugins/$plugin/include/HardwareStats.php";
$graph  = $cfg['graph'];
$frame  = $cfg['frame'];
$port   = $cfg['port'];
$show   = $cfg['show'];
$text   = $cfg['text'];
$cols   = $cfg['cols'];
$pools  = $pools ?? ['cache'];
$offset = $text=='left' ? 6 : -6;
$index  = $text=='left' ? 2 : 0;
$parity = $arraysize = $arrayfree = 0;
$series = $sizes = [];
$gap    = 0.18;
$height = 50;
$y      = 2;
$rows   = 0;

foreach ($disks as $disk) {
  if ((($disk['fsStatus']??'')!='Mounted' && $disk['type']!='Parity') || strpos($disk['status']??'','_NP')!==false) continue;
  switch ($disk['type']) {
  case 'Parity':
    if ($disk['size']*1024 > $parity) $parity = $disk['size']*1024;
    break;
  case 'Data':
    $arraysize += $disk['size']*1024;
    $arrayfree += $disk['fsFree']*1024;
  case 'Flash':
    $series[] = "'"._(my_disk($disk['name']),3)."'";
    $sizes[] = "'".my_scale($disk['size']*1024,$unit,-1,-1)." $unit'";
    $rows++;
    break;
  case 'Cache':
    if (in_array($disk['name'],$pools)) {
      $series[] = "'".ucfirst($disk['name'])."'";
      $sizes[] = "'".my_scale($disk['fsSize']*1024,$unit,-1,-1)." $unit'";
      $rows++;
    }
    break;
  }
}

if ($arraysize > 0) {
  $arrayused = $arraysize-$arrayfree;
  $totalpercent = 100-round(100*$parity/($arraysize+$parity));
  $totaldisk = 100-$totalpercent-$gap;
  $freepercent = $var['startMode']=='Normal' ? round(100*$arrayfree/$arraysize) : 100;
  $arraypercent = 100-$freepercent;
}

if ($display['time']=="%R") {
  $hour = '%H:%M';
  $minute = '%H:%M';
  $second = '%H:%M:%S';
} else {
  $hour = '%l:%M %p';
  $minute = '%l:%M %p';
  $second = '%l:%M:%S %p';
}

$critical = $display['critical']>0;
$warning = $display['warning']>0 && ($display['critical']==0 || $display['warning']<$display['critical']);

function bar_color($val) {
  global $display;
  $critical = $display['critical'];
  $warning = $display['warning'];
  if ($val>=$critical && $critical>0) return "redbar";
  if ($val>=$warning && $warning>0) return "orangebar";
  return "greenbar";
}
?>
<script src="<?=autov("/plugins/$plugin/javascript/jquery.highcharts.js")?>"></script>
<script>
var graph = <?=$graph?>;
var frame = <?=$frame?>;
var syschart,cpuchart,ramchart,comchart,hddchart;
var interval = {1:60, 2:120, 3:300, 7:600, 14:1200, 21:1800, 31:3600, 3653:7200};

function autoscale(value,text,size,kilo) {
  if (kilo==null) kilo = 1000;
  var unit = kilo==1024 ? ['','ki','Mi','Gi','Ti','Pi','Ei'] : ['','k','M','G','T','P','E'];
  var base = value>1?Math.floor(Math.log(value)/Math.log(kilo)):0;
  var data = base<unit.length?value/Math.pow(kilo, base):0;
  var scale = (data<100?100:10)/size;
  if (data==0) base=0;
  return ((Math.round(scale*data)/scale)+' '+unit[base]+text).replace('.','<?=$display['number'][0]?>');
}
<?if ($show):?>
function setChart() {
  if (graph==0) {
    setTimeout(realtime);
    $('#reset').show(); $('#monitor').show();
  } else {
    $('#reset').hide(); $('#monitor').hide();
  }
}
function modeller(period) {
  graph = period;
  clearTimeout(timers.rtstime);
<?if (strpos($show,'cpu')!==false):?>
  clearTimeout(timers.cputime); setTimeout(cpu);
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
  clearTimeout(timers.ramtime); setTimeout(ram);
<?endif;?>
<?if (strpos($show,'com')!==false):?>
  clearTimeout(timers.comtime); setTimeout(com);
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
  clearTimeout(timers.hddtime); setTimeout(hdd);
<?endif;?>
  setChart();
}
function resizer(time) {
  var series, start;
  if (time<frame) {
<?if (strpos($show,'cpu')!==false):?>
    for (var i=0; i<3; i++) {
      series = cpuchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      cpuchart.redraw();
    }
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    for (var i=0; i<3; i++) {
      series = ramchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      ramchart.redraw();
    }
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    for (var i=0; i<2; i++) {
      series = comchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      comchart.redraw();
    }
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    for (var i=0; i<2; i++) {
      series = hddchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      hddchart.redraw();
    }
<?endif;?>
  }
  frame = time;
}
function realtime() {
  var datetime = new Date();
  var timestamp = datetime.getTime();
  $.post('<?=$stats?>',{cmd:'rts',port:'<?=$port?>'},function(string) {
    var value, shift, i;
    if (graph==0) timers.rtstime = setTimeout(realtime,1000);
    value = string.split(' ');
<?if (strpos($show,'cpu')!==false):?>
    shift = cpuchart.series[0].length==0 || cpuchart.series[0].data.length>frame;
    for (i=0; i<3; i++) cpuchart.series[i].addPoint([timestamp, (value[i+0]*1)], false, shift);
    cpuchart.redraw();
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    shift = ramchart.series[0].length==0 || ramchart.series[0].data.length>frame;
    for (i=0; i<3; i++) ramchart.series[i].addPoint([timestamp, (value[i+5]*1)], false, shift);
    ramchart.redraw();
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    shift = comchart.series[0].length==0 || comchart.series[0].data.length>frame;
    for (i=0; i<2; i++) comchart.series[i].addPoint([timestamp, (value[i+8]*1)], false, shift);
    comchart.redraw();
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    shift = hddchart.series[0].length==0 || hddchart.series[0].data.length>frame;
    for (i=0; i<2; i++) hddchart.series[i].addPoint([timestamp, (value[i+3]*1)], false, shift);
    hddchart.redraw();
<?endif;?>
  });
}
<?endif;?>
function systemStats() {
  clearTimeout(timers.systime);
  if (graph>0) {
<?if (strpos($show,'cpu')!==false):?>
    setTimeout(cpu);
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    setTimeout(ram);
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    setTimeout(com);
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    setTimeout(hdd);
<?endif;?>
  }
}
function diskStats() {
  setTimeout(function(){sys(0);});
  if (graph>0) {
<?if (strpos($show,'cpu')!==false):?>
    clearTimeout(timers.cputime);
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    clearTimeout(timers.ramtime);
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    clearTimeout(timers.comtime);
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    clearTimeout(timers.hddtime);
<?endif;?>
  }
}
function sys(delay) {
  var series = [], i = 0;
  if (delay!=0) delay = 1200;
  $.post('<?=$stats?>',{cmd:'sys',startMode:'<?=$var["startMode"]?>',pools:'<?=implode(",",$pools)?>'},function(string) {
    if ($('#tab1').is(':checked')) timers.systime = setTimeout(function(){sys(0);},30000);
    if (!syschart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; syschart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; syschart.series[i++].setData(series.data, false);});
    }
    syschart.redraw();
<?if ($text=='left'):?>
    $.each(syschart.series[2].data, function(k,v) {setTimeout(function() {v.dataLabel.css({opacity:1});}, delay);});
<?else:?>
    $.each(syschart.series[0].data, function(k,v) {setTimeout(function() {v.dataLabel.css({opacity:1});}, delay); if (v.total<4) v.dataLabel.attr({x:6});});
<?endif;?>
  });
  $.post('<?=$stats?>',{cmd:'sum',startMode:'<?=$var['startMode']?>',plugin:'<?=$plugin?>'},function(string) {
    var data = string.split(';');
    $('#totalarray').attr('class',data[0]).css('width',data[1]);
    $('#stats1').attr('class',data[2]);
    $('#stats2').html(data[3]);
    $('#stats3').html(data[4]);
  });
}
<?if (strpos($show,'cpu')!==false):?>
function cpu() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'cpu',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.cputime = setTimeout(cpu,interval[graph]*1000);
    if (!cpuchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; cpuchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; cpuchart.series[i++].setData(series.data, false);});
    }
    cpuchart.redraw();
  });
}
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
function ram() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'ram',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.ramtime = setTimeout(ram,interval[graph]*1000);
    if (!ramchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; ramchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; ramchart.series[i++].setData(series.data, false);});
    }
    ramchart.redraw();
  });
}
<?endif;?>
<?if (strpos($show,'com')!==false):?>
function com() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'com',port:'<?=$port?>',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.comtime = setTimeout(com,interval[graph]*1000);
    if (!comchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; comchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; comchart.series[i++].setData(series.data, false);});
    }
    comchart.redraw();
  });
}
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
function hdd() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'hdd',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.hddtime = setTimeout(hdd,interval[graph]*1000);
    if (!hddchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; hddchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; hddchart.series[i++].setData(series.data, false);});
    }
    hddchart.redraw();
  });
}
<?endif;?>
function scrollBarWidth() {
  $('body').append('<div id="fakescrollbar" style="width:50px;height:50px;overflow:hidden;position:absolute;top:-200px;left:-200px;"></div>');
  var fakeScrollBar = $('#fakescrollbar');
  fakeScrollBar.append('<div style="height:100px;">&nbsp;</div>');
  var w1 = fakeScrollBar.find('div').innerWidth();
  fakeScrollBar.css('overflow-y','scroll');
  var w2 = $('#fakescrollbar').find('div').html('required to init new width.').innerWidth();
  fakeScrollBar.remove();
  return (w1-w2+1);
}
function getWidth(full) {
  var width = $('.tabs').width()-scrollBarWidth();
  return full ? width : (width-<?=6*$cols?>)/<?=($cols+1)?>;
}
$(function() {
  $(window).resize(function(){location=location});
<?if ($show):?>
  $('#tab1').bind({click:function(){$('span.status').hide();diskStats();}});
  $('#tab2').bind({click:function(){$('span.status').show();systemStats();}});
  setChart();
<?endif;?>
  $('#totalarray').animate({width:'<?=$arraypercent?>%'}, 1500);
  Highcharts.setOptions({
    global:{useUTC:false},
    chart:{
      style:{fontFamily:'clear-sans',fontSize:'1.1rem'},
      backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'rgb(96,96,96)'],[1,'rgb(16,16,16)']]},
      borderWidth:0,
      borderRadius:8,
      plotBackgroundColor:null,
      plotBorderWidth:0,
      plotShadow:false,
      type:'area',
      margin:[55,<?=$cfg['size']?'70':'20'?>,35,70],
      spacingTop:15,
      spacingRight:0,
      spacingBottom:0,
      spacingLeft:0,
      height:260,
      width:getWidth(false),
      animation:false,
      zoomType:'x'
    },
    title:{style:{color:'#fff',fontSize:'1.8rem'},y:10},
    subtitle:{style:{color:'#aaa',fontSize:'1.4rem'},y:30},
    plotOptions:{
      area:{marker:{enabled:false},lineWidth:1,states:{hover:{lineWidth:1}},shadow:false,turboThreshold:1},
      bar:{borderWidth:0,borderRadius:2,states:{hover:{enabled:false}},shadow:false,turboThreshold:1},
      series:{animation:false}
    },
    xAxis:{
      type:'datetime',
      dateTimeLabelFormats:{second:'<?=$second?>',minute:'<?=$minute?>',hour:'<?=$hour?>'},
      gridLineWidth:0,
      lineColor:'#999',
      tickColor:'#999',
      labels:{style:{color:'#999',fontSize:'1rem'},y:20}
    },
    yAxis:{
      title:{text:null},
      gridLineColor:'rgba(255,255,255,.1)',
      lineWidth:0,
      tickWidth:0,
      labels:{style:{color:'#999',fontSize:'1rem'},y:2},
      min:0
    },
    tooltip:{
      backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'rgba(96,96,96,.8)'],[1,'rgba(16,16,16,.8)']]},
      borderWidth:0,
      shared:true,
      style:{color:'#fff',fontSize:'1rem'},
      positioner:function() {return {x:70,y:5};}
    },
    legend:{
      borderWidth:0,
      align:'right',
      verticalAlign:'top',
      layout:'vertical',
      x:-22,
      y:-4,
      floating:true,
      itemStyle:{color:'#ccc',fontSize:'9px'},
      itemMarginBottom:2,
      itemHoverStyle:{color:'yellow'},
      itemHiddenStyle:{color:'#999'}
    },
    exporting:{enabled:false},
    credits:{enabled:false}
  });
  syschart = new Highcharts.Chart({
    chart:{renderTo:'sys',events:{load:sys},type:'bar',height:<?=($rows*$height)+75?>,width:getWidth(true),zoomType:null},
    colors:[{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#941C00'],[1,'#DE1100']]},{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#CE7C10'],[1,'#F0B400']]},{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#17BF0B'],[1,'#127A05']]},{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#D9D9D9'],[1,'#949494']]}],
    plotOptions:{series:{stacking:'normal',animation:{duration:1000},pointPadding:0.2,groupPadding:0,
    dataLabels:{enabled:true,color:'#fff',align:'<?=$text?>',verticalAlign:'top',x:<?=$offset?>,y:<?=$y?>,style:{opacity:0},formatter:function(){if (this.series.index==<?=$index?>) return this.total+' %';}}}},
    title:{text:_('Disk Usage')},
    subtitle:{text:_('utilization in percentage')},
<?if ($cfg['size']):?>
    xAxis:[{alternateGridColor:'rgba(255,255,255,.018)',type:'linear',labels:{style:{fontSize:'1.1rem'},y:5},lineWidth:0,tickWidth:0,categories:[<?=implode(',',$series)?>]},
    {opposite:true,linkedTo:0,type:'linear',labels:{style:{fontSize:'1.1rem'},y:5},lineWidth:0,tickWidth:0,categories:[<?=implode(',',$sizes)?>]}],
<?else:?>
    xAxis:{alternateGridColor:'rgba(255,255,255,.018)',type:'linear',labels:{style:{fontSize:'1.1rem'},y:5},lineWidth:0,tickWidth:0,categories:[<?=implode(',',$series)?>]},
<?endif;?>
    yAxis:{gridLineDashStyle:'dash',labels:{y:15},max:100,plotLines:[
<?if ($warning):?>
      {label:{text:'<?=$display['warning']?>',style:{color:'#ff6600',fontSize:'1rem'},verticalAlign:'top',textAlign:'right',y:-4,x:-4},dashStyle:'dash',color:'#ff6600',width:0.8,value:<?=$display['warning']?>,zIndex:5},
<?endif;?>
<?if ($critical):?>
      {label:{text:'<?=$display['critical']?>',style:{color:'#ff6600',fontSize:'1rem'},verticalAlign:'top',textAlign:'right',y:-4,x:-4},dashStyle:'dash',color:'#ff6600',width:0.8,value:<?=$display['critical']?>,zIndex:5}
<?endif;?>
    ]},
    legend:{enabled:false},
    tooltip:{enabled:false}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/sys.png',18,8,32,32).add();
  });
<?if (strpos($show,'cpu')!==false):?>
  cpuchart = new Highcharts.Chart({
    chart:{renderTo:'cpu',events:{load:cpu}},
    colors:['#BDE5F8','#E68A00','#EDC240'],
    plotOptions:{area:{stacking:'normal'}},
    title:{text:_('Processor')},
    subtitle:{text:_('CPU Load')},
    yAxis:{<?=$cfg['cpu']==100?'max:100,':''?>labels:{formatter:function(){return this.value+' %';}}},
    legend:{y:-11},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y,'%',10)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/cpu.png',18,8,32,32).add();
  });
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
  ramchart = new Highcharts.Chart({
    chart:{renderTo:'ram',events:{load:ram}},
    colors:['#4DA74D','#E68A00','#EDC240'],
    plotOptions:{area:{stacking:'normal'}},
    title:{text:_('Memory')},
    subtitle:{text:_('RAM')},
    yAxis:{labels:{formatter:function(){return autoscale(this.value*1024,'B',100,1024);}}},
    legend:{y:-11},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y*1024,'B',1,1024)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/ram.png',18,8,32,32).add();
  });
<?endif;?>
<?if (strpos($show,'com')!==false):?>
  comchart = new Highcharts.Chart({
    chart:{renderTo:'com',events:{load:com}},
    colors:['#E68A00','#EDC240'],
    title:{text:_('Network')},
    subtitle:{text:'<?=$cfg['port']?>'},
    yAxis:{labels:{formatter:function(){return autoscale(this.value*<?=$cfg["unit"]=='b'?8000:1000?>,'<?=$cfg["unit"]?>/s',10);}}},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y*<?=$cfg["unit"]=='b'?8000:1000?>,'<?=$cfg["unit"]?>/s',1)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/com.png',18,8,32,32).add();
  });
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
  hddchart = new Highcharts.Chart({
    chart:{renderTo:'hdd',events:{load:hdd}},
    colors:['#E68A00','#EDC240'],
    title:{text:_('Storage')},
    subtitle:{text:'<?=exec("ls /dev/[hs]d[a-z]|wc -l")?> _(disks)_'},
    yAxis:{labels:{formatter:function(){return autoscale(this.value*500,'B/s',10);}}},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y*500,'B/s',1)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/hdd.png',18,8,32,32).add();
  });
<?endif;?>
});
</script>
<?if ($arraysize>0):?>
<div class="mybar whitebar leftbar" style="width:<?=$totalpercent?>%;"><span id="totalarray" class="mybar <?=bar_color($arraypercent)?> align-left" style="width:0"></span></div>
<div class="mybar graybar rightbar" style="width:<?=$totaldisk?>%"></div>
<div class="leftbar"><img src="<?="/plugins/$plugin/images"?>/array.png" class="left"><strong><?=my_scale($arraysize,$unit,-1,-1)." $unit"?></strong><br><small>_(Total Array Size)_</small></div>
<div class="leftbar"><span id="stats1" class="mybar <?=bar_color($arraypercent)?> inside"></span><span id="stats2"><strong> <?=my_scale($arrayused,$unit,null,-1)." $unit"?> <img src="<?="/plugins/$plugin/images"?>/arrow.png" class="top"> <?=$arraypercent?>%</strong><br/><small>_(Total Space Used)_</small></span></div>
<div class="leftbar"><span class="mybar whitebar inside"></span><span id="stats3"><strong><?=my_scale($arrayfree,$unit,null,-1)." $unit"?> <img src="<?="/plugins/$plugin/images"?>/arrow.png" class="top"> <?=$freepercent?>%</strong><br/><small>_(Available for Data)_</small></span></div>
<div class="rightbar"><span class="mybar graybar inside"></span><strong> <?=my_scale($parity,$unit,-1,-1)." $unit"?></strong><br><small>_(Used for Parity)_</small></div>
<?if ($critical):?>
<div class="rightbar"><span class="mybar redbar inside"></span><strong>_(Above)_ <?=$display['critical']?>%</strong><br><small>_(Low on Space)_</small></div>
<?endif;?>
<?if ($warning):?>
<div class="rightbar"><span class="mybar orangebar inside"></span><strong>_(Above)_ <?=$display['warning']?>%</strong><br><small>_(High on Usage)_</small></div>
<?endif;?>
<?if ($critical || $warning):?>
<div class="rightbar"><span class="mybar greenbar inside"></span><strong>_(Below)_ <?=$warning?$display['warning']:$display['critical']?>%</strong><br><small>_(Normal Usage)_</small></div>
<?endif;?>
<?endif;?>
<span id="sys" class="graph1"></span>
<?if (!empty($cfg['stats']) && substr($cfg['stats'],0,5)!='Tasks'):?>
<p><input type="button" value="_(Done)_" onclick="done()"></p>
<?endif;?>
